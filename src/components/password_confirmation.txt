import React, { useEffect, useRef, useState } from 'react';
import {
  Box, Typography, Avatar, IconButton, TextField, Button, Grid, Snackbar
} from '@mui/material';
import YouTubeIcon from '@mui/icons-material/YouTube';
import InstagramIcon from '@mui/icons-material/Instagram';
import FacebookIcon from '@mui/icons-material/Facebook';
import TwitterIcon from '@mui/icons-material/Twitter';
import Navbar from './Navbar';
import Footer from './Footer';
import { getAuth, signOut, onAuthStateChanged } from 'firebase/auth';
import { doc, setDoc, getDoc } from 'firebase/firestore';
import { db } from './firebase';
import { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';

const ProfilePage = () => {
  const auth = getAuth();
  const [user, setUser] = useState(null);
  const [snack, setSnack] = useState(false);
  const [heads, setHeads] = useState(() => Number(localStorage.getItem('heads')) || 0);
  const [tails, setTails] = useState(() => Number(localStorage.getItem('tails')) || 0);
  const [drawerOpen, setDrawerOpen] = useState(false);
  const coinRef = useRef(null);

  const [formData, setFormData] = useState({
    name: '',
    dob: '',
    phone: '',
    team: '',
    playerName: '',
    email: '',
    uid: '',
      photoURL: '',
  });

  // ✅ Track user and fetch their data from Firestore
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      if (currentUser) {
        setUser(currentUser);
        const docRef = doc(db, 'users', currentUser.uid);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
          const data = docSnap.data();
          setFormData({
            ...data,
            email: currentUser.email,
            uid: currentUser.uid,
          });
        } else {
          setFormData(prev => ({
            ...prev,
            email: currentUser.email,
            uid: currentUser.uid,
          }));
        }
      }
    });

    return () => unsubscribe();
  }, []);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  // ✅ Save data to Firestore
  const handleUpdate = async () => {
    try {
      if (!user) return;
      const userRef = doc(db, 'users', user.uid);
      await setDoc(userRef, {
        ...formData,
        email: user.email,
        uid: user.uid
      });
      setSnack(true);
    } catch (err) {
      console.error('Error updating profile:', err);
    }
  };

  const handleLogout = async () => {
    await signOut(auth);
  };

  const disabledFieldStyle = {
    input: { color: 'white !important', WebkitTextFillColor: 'white !important' },
    label: { color: 'gray' }
  };

  const handleImageUpload = async (e) => {
  const file = e.target.files[0];
  if (!file || !user) return;

  try {
    const storage = getStorage();
    const storageRef = ref(storage, `profileImages/${user.uid}.jpg`);
    await uploadBytes(storageRef, file);
    const downloadURL = await getDownloadURL(storageRef);

    // Update state and Firestore
    setFormData(prev => ({ ...prev, photoURL: downloadURL }));

    const userRef = doc(db, 'users', user.uid);
    await setDoc(userRef, { ...formData, photoURL: downloadURL, email: user.email, uid: user.uid });
    setSnack(true);
  } catch (error) {
    console.error("Image upload error:", error);
  }
};
  return (
    <>
      <Navbar
        drawerOpen={drawerOpen}
        setDrawerOpen={setDrawerOpen}
        heads={heads}
        tails={tails}
        setHeads={setHeads}
        setTails={setTails}
        coinRef={coinRef}
        onLogout={handleLogout}
      />

      <Box sx={{ backgroundColor: '#121212', minHeight: '100vh', color: '#fff', pt: 10, px: 2 }}>
        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 2, mb: 4 }}>
          <Avatar src="https://i.pinimg.com/564x/4b/96/76/4b967635885d51eaa40e67c0d4163df0.jpg" sx={{ width: 120, height: 120 }} />
          <Typography variant="h5">{formData.name || 'Your Name'}</Typography>
          <Typography variant="subtitle2" color="lightgreen">Premium User</Typography>
        </Box>
<Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 1 }}>
  <Avatar
    src={formData.photoURL || "https://i.pinimg.com/564x/4b/96/76/4b967635885d51eaa40e67c0d4163df0.jpg"}
    sx={{ width: 120, height: 120, border: '3px solid #58a6ff', cursor: 'pointer' }}
    onClick={() => document.getElementById('profileImageInput').click()}
  />
  <Typography variant="caption" sx={{ color: 'gray' }}>Click to change profile photo</Typography>
  <input
    type="file"
    id="profileImageInput"
    accept="image/*"
    onChange={handleImageUpload}
    style={{ display: 'none' }}
  />
</Box>

        <Box sx={{ maxWidth: 600, mx: 'auto', backgroundColor: '#1e1e1e', p: 3, borderRadius: 3 }}>
          <Typography variant="h6" gutterBottom>Profile Information</Typography>
          <Grid container spacing={2}>
            <Grid item xs={12}>
              <TextField label="Email" name="email" value={formData.email} disabled fullWidth size="small" variant="outlined" sx={disabledFieldStyle} />
            </Grid>
            <Grid item xs={12}>
              <TextField label="User ID (UID)" name="uid" value={formData.uid} disabled fullWidth size="small" variant="outlined" sx={disabledFieldStyle} />
            </Grid>
            <Grid item xs={12}>
              <TextField label="Full Name" name="name" value={formData.name} onChange={handleChange} fullWidth size="small" variant="outlined" sx={{ input: { color: 'white' }, label: { color: 'gray' } }} />
            </Grid>
            <Grid item xs={6}>
              <TextField label="Date of Birth" name="dob" type="date" value={formData.dob} onChange={handleChange} fullWidth size="small" variant="outlined" InputLabelProps={{ shrink: true }} sx={{ input: { color: 'white' }, label: { color: 'gray' } }} />
            </Grid>
            <Grid item xs={6}>
              <TextField label="Phone Number" name="phone" value={formData.phone} onChange={handleChange} fullWidth size="small" variant="outlined" sx={{ input: { color: 'white' }, label: { color: 'gray' } }} />
            </Grid>
            <Grid item xs={6}>
              <TextField label="Team Name" name="team" value={formData.team} onChange={handleChange} fullWidth size="small" variant="outlined" sx={{ input: { color: 'white' }, label: { color: 'gray' } }} />
            </Grid>
            <Grid item xs={6}>
              <TextField label="Player Name" name="playerName" value={formData.playerName} onChange={handleChange} fullWidth size="small" variant="outlined" sx={{ input: { color: 'white' }, label: { color: 'gray' } }} />
            </Grid>
          </Grid>

          <Button fullWidth onClick={handleUpdate} variant="contained" sx={{ mt: 3, fontWeight: 600, borderRadius: 2, background: 'linear-gradient(to right, #43cea2, #185a9d)', '&:hover': { background: 'linear-gradient(to right, #2bc0e4, #eaecc6)', color: 'black' } }}>
            Update Profile
          </Button>

          <Box mt={4}>
            <Typography variant="subtitle1" fontWeight="bold" gutterBottom>Social Media</Typography>
            <Box display="flex" gap={2}>
              <IconButton href="https://youtube.com" target="_blank" color="error"><YouTubeIcon /></IconButton>
              <IconButton href="https://facebook.com" target="_blank" color="primary"><FacebookIcon /></IconButton>
              <IconButton href="https://instagram.com" target="_blank" sx={{ color: '#e1306c' }}><InstagramIcon /></IconButton>
              <IconButton href="https://twitter.com" target="_blank" sx={{ color: '#1DA1F2' }}><TwitterIcon /></IconButton>
            </Box>
          </Box>
        </Box>
      </Box>

      <Snackbar open={snack} autoHideDuration={3000} onClose={() => setSnack(false)} message="Profile updated successfully!" />
      <Footer />
    </>
  );
};

export default ProfilePage;
